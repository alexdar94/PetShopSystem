/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pet.shop.system.nb.Frame;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import javax.swing.JOptionPane;
import pet.shop.system.nb.BoardingService;
import pet.shop.system.nb.Connect;
import pet.shop.system.nb.Enum.Enum_Domestic_Exotic;
import pet.shop.system.nb.Enum.Enum_Species;

/**
 *
 * @author User
 */
public class Frame_Receptionist_Boarding_Service extends javax.swing.JFrame {
Connection conn=null;
PreparedStatement pst=null;
ResultSet rs=null;
private Frame_Receptionist fr;
private boolean isEdit=false;
private SimpleDateFormat obDataFormat = new SimpleDateFormat("MMM dd yyyy");
private String id_selected;
private int id;
    /**
     * Creates new form Frame_Receptionist_Boarding_Service
     */
    public Frame_Receptionist_Boarding_Service() {
        initComponents();
    }

    public Frame_Receptionist_Boarding_Service(Frame_Receptionist fr) {
        initComponents();
        this.fr=fr;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btn_done_boarding = new javax.swing.JButton();
        jdc_boarding = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        et_owner_last_name = new javax.swing.JTextField();
        et_owner_contact = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        et_owner_email = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        et_owner_address = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        et_owner_first_name = new javax.swing.JTextField();
        cb_species = new javax.swing.JComboBox();
        jLabel6 = new javax.swing.JLabel();
        et_owner_pet_name = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cb_domestic = new javax.swing.JCheckBox();
        cb_exotic = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        cb_pet_status = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        btn_done_boarding.setText("Done");
        btn_done_boarding.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_done_boardingMouseClicked(evt);
            }
        });

        jdc_boarding.setDateFormatString("MMM d, yyy");

        jLabel3.setText("Owner Last Name");

        jLabel5.setText("Email");

        jLabel4.setText("Address");

        jLabel11.setText("Contact");

        jLabel2.setText("Owner First Name");

        jLabel12.setText("Species");

        cb_species.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Dog", "Cat", "Rabbit", "Lizard","Bird" }));

        jLabel6.setText("Date");

        jLabel8.setText("Pet name");

        cb_domestic.setText("Domestic");

        cb_exotic.setText("Exotic");

        jLabel7.setText("Health status");

        cb_pet_status.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Healthy","Sick" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btn_done_boarding, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel2)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel6)
                                .addComponent(jLabel11)
                                .addComponent(jLabel4)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel8))
                                .addComponent(jLabel5)
                                .addComponent(jLabel7))
                            .addGap(18, 18, 18)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(cb_pet_status, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(cb_domestic)
                                    .addGap(18, 18, 18)
                                    .addComponent(cb_exotic))
                                .addComponent(jdc_boarding, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                .addComponent(et_owner_contact, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(et_owner_email, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(et_owner_pet_name, javax.swing.GroupLayout.PREFERRED_SIZE, 215, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(et_owner_last_name, javax.swing.GroupLayout.DEFAULT_SIZE, 217, Short.MAX_VALUE)
                                .addComponent(et_owner_address)))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel12)
                            .addGap(66, 66, 66)
                            .addComponent(cb_species, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(82, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(112, 112, 112)
                    .addComponent(et_owner_first_name, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(84, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(et_owner_last_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(et_owner_address, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(et_owner_contact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(et_owner_email, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(et_owner_pet_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_domestic)
                    .addComponent(cb_exotic))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb_species, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jdc_boarding, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cb_pet_status, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addComponent(btn_done_boarding, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(et_owner_first_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(436, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_done_boardingMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_done_boardingMouseClicked
        if(isEdit==true){
            if(cb_domestic.isSelected()){
                String sql="Update BoardingServiceTable set cust_first_name='"+et_owner_first_name.getText()+"',"+
                "cust_last_name='"+et_owner_last_name.getText()+"',"+
                "cust_address='"+et_owner_address.getText()+"',"+
                "cust_contact='"+et_owner_contact.getText()+"',"+
                "cust_email='"+et_owner_email.getText()+"',"+
                "pet_name='"+et_owner_pet_name.getText()+"',"+
                "pet_species='"+cb_species.getSelectedItem().toString()+"',"+
                "pet_doe='"+ Enum_Domestic_Exotic.Domestic.toString()+"',"+
                "appointment_date='"+obDataFormat.format(jdc_boarding.getDate())+"',"+
                "pet_status='"+cb_pet_status.getSelectedItem().toString()+"',"+
                "pet_last_fed='00:00' "+
                "WHERE ID='"+id_selected+"'";
                query(sql);
            }else{
                String sql="Update BoardingServiceTable set cust_first_name='"+et_owner_first_name.getText()+"',"+
                "cust_last_name='"+et_owner_last_name.getText()+"',"+
                "cust_address='"+et_owner_address.getText()+"',"+
                "cust_contact='"+et_owner_contact.getText()+"',"+
                "cust_email='"+et_owner_email.getText()+"',"+
                "pet_name='"+et_owner_pet_name.getText()+"',"+
                "pet_species='"+cb_species.getSelectedItem().toString()+"',"+
                "pet_doe='"+ Enum_Domestic_Exotic.Exotic.toString()+"',"+
                "appointment_date='"+obDataFormat.format(jdc_boarding.getDate())+"',"+
                "pet_status='"+cb_pet_status.getSelectedItem().toString()+"',"+
                "pet_last_fed='00:00' "+
                "WHERE ID='"+id_selected+"'";
                query(sql);
            }
            isEdit=false;
            this.setVisible(false);
        }else{
            String sql="SELECT TOP 1 ID FROM BoardingServiceTable ORDER BY ID DESC";
            try{
                pst=conn.prepareStatement(sql);
                rs=pst.executeQuery();
                if(rs.next()){id=rs.getInt("ID");}
            }catch(Exception e){

            }

            if(cb_domestic.isSelected()&&cb_exotic.isSelected()){
                JOptionPane.showMessageDialog(null,"Error creating boarding service.Please select domestic or exotic.");
            }else if(cb_domestic.isSelected()){
                id++;
                BoardingService boardingService= new BoardingService(id,et_owner_first_name.getText(), et_owner_last_name.getText(),
                    et_owner_address.getText(), et_owner_contact.getText(), et_owner_email.getText(),
                    et_owner_pet_name.getText(), Enum_Species.valueOf(cb_species.getSelectedItem().toString()),
                    Enum_Domestic_Exotic.Domestic,jdc_boarding.getDate());
                insertToTable(Enum_Domestic_Exotic.Domestic.toString(),cb_species.getSelectedItem().toString());
                JOptionPane.showMessageDialog(null, "Boarding service recorded.");

                Frame_Receptionist_Payout fr=new Frame_Receptionist_Payout(boardingService);
                fr.setVisible(true);
            }else if (cb_exotic.isSelected()){
                id++;
                BoardingService boardingService= new BoardingService(id,et_owner_first_name.getText(), et_owner_last_name.getText(),
                    et_owner_address.getText(), et_owner_contact.getText(), et_owner_email.getText(),
                    et_owner_pet_name.getText(), Enum_Species.valueOf(cb_species.getSelectedItem().toString()),
                    Enum_Domestic_Exotic.Exotic,jdc_boarding.getDate());
                insertToTable(Enum_Domestic_Exotic.Exotic.toString(),cb_species.getSelectedItem().toString());
                JOptionPane.showMessageDialog(null, "Boarding service recorded.");

                Frame_Receptionist_Payout fr=new Frame_Receptionist_Payout(boardingService);
                fr.setVisible(true);
            }else{
                JOptionPane.showMessageDialog(null,"Error creating boarding service.");
            }
        }
        fr.updateJTable(fr.getJTable_Boarding());
    }//GEN-LAST:event_btn_done_boardingMouseClicked

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        conn=Connect.connectDB();
        if(isEdit==true){loadData();}
    }//GEN-LAST:event_formWindowOpened
 
    private void query(String sql){
        try{
                pst=conn.prepareStatement(sql);
                pst.executeUpdate();
            }catch(Exception e){
                e.printStackTrace();
            }
    }
    
    public void insertToTable(String doe, String species){
        String sql="INSERT INTO BoardingServiceTable VALUES('"+
                        id+"','"+
                        et_owner_first_name.getText()+"','"+
                        et_owner_last_name.getText()+"','"+
                        et_owner_address.getText()+"','"+
                        et_owner_contact.getText()+"','"+
                        et_owner_email.getText()+"','"+
                        et_owner_pet_name.getText()+"','"+
                        species+"','"+
                        doe+"','"+
                        obDataFormat.format(jdc_boarding.getDate())+"','"+
                        cb_pet_status.getSelectedItem().toString()+"','"+
                        "00:00"+"')";
        try{
        pst=conn.prepareStatement(sql);
        pst.execute();
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    
    public void setID(String id){
        id_selected=id;
        isEdit=true;
    }
    
    public void loadData(){
        String sql="SELECT * FROM BoardingServiceTable WHERE ID = "+id_selected;
        System.out.println("asdasd");
        try{
            pst=conn.prepareStatement(sql);
            rs= pst.executeQuery();
            
            if(rs.next()){
            et_owner_first_name.setText(rs.getString("cust_first_name"));
            et_owner_last_name.setText(rs.getString("cust_last_name"));
            et_owner_address.setText(rs.getString("cust_address"));
            et_owner_contact.setText(rs.getString("cust_contact"));
            et_owner_email.setText(rs.getString("cust_email"));
            et_owner_pet_name.setText(rs.getString("pet_name"));
            cb_species.setSelectedItem(rs.getString("pet_species"));
            if(rs.getString("pet_doe").equals("Domestic")){
                cb_domestic.setSelected(true);
            }else{
                cb_exotic.setSelected(true);    
            }
            jdc_boarding.setDate(obDataFormat.parse(rs.getString("appointment_date")));
            cb_pet_status.setSelectedItem(rs.getString("pet_status"));
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame_Receptionist_Boarding_Service.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame_Receptionist_Boarding_Service.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame_Receptionist_Boarding_Service.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame_Receptionist_Boarding_Service.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Frame_Receptionist_Boarding_Service().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_done_boarding;
    private javax.swing.JCheckBox cb_domestic;
    private javax.swing.JCheckBox cb_exotic;
    private javax.swing.JComboBox cb_pet_status;
    private javax.swing.JComboBox cb_species;
    private javax.swing.JTextField et_owner_address;
    private javax.swing.JTextField et_owner_contact;
    private javax.swing.JTextField et_owner_email;
    private javax.swing.JTextField et_owner_first_name;
    private javax.swing.JTextField et_owner_last_name;
    private javax.swing.JTextField et_owner_pet_name;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private com.toedter.calendar.JDateChooser jdc_boarding;
    // End of variables declaration//GEN-END:variables
}
